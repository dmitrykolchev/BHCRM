//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DykBits.Crm.Data
{
    using System;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    public enum ExtraCostRateState : byte
    {
        [XmlEnum("0")]
        NotExist = 0,
        [XmlEnum("1")]
        Active = 1,
        [XmlEnum("2")]
        Inactive = 2,
    }
    public partial class ExtraCostRate : DataItem
    {
        public const string DataItemClassName = "ExtraCostRate";
        public const string ValueProperty = "Value";
        public const string IsDefaultProperty = "IsDefault";
        private decimal _ValueField;
        private bool _IsDefaultField;
        public override string DataItemClass
        {
            get
            {
                return DataItemClassName;
            }
        }
        [XmlAttribute()]
        public ExtraCostRateState State
        {
            get
            {
                return (ExtraCostRateState)((IDataItem)this).State;
            }
            set
            {
                ((IDataItem)this).State = (byte)value;
            }
        }
        [Column(Name="Value", IsNullable=false)]
        [XmlAttribute()]
        public decimal Value
        {
            get
            {
                return this._ValueField;
            }
            set
            {
                this._ValueField = value;
                InvokePropertyChanged("Value");
            }
        }
        [Column(Name="IsDefault", IsNullable=false)]
        [XmlAttribute()]
        public bool IsDefault
        {
            get
            {
                return this._IsDefaultField;
            }
            set
            {
                this._IsDefaultField = value;
                InvokePropertyChanged("IsDefault");
            }
        }
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            NotifyPropertyChangedInternal(e.PropertyName);
            base.OnPropertyChanged(e);
        }

		partial void NotifyPropertyChangedInternal(string propertyName);
    }
}
