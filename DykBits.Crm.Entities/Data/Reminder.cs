//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DykBits.Crm.Data
{
    using System;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    public enum ReminderState : byte
    {
        [XmlEnum("0")]
        NotExist = 0,
        [XmlEnum("1")]
        Active = 1,
        [XmlEnum("2")]
        Dismissed = 2,
    }
    public partial class Reminder : DataItem
    {
        public const string DataItemClassName = "Reminder";
        public const string StartDateProperty = "StartDate";
        public const string DueDateProperty = "DueDate";
        public const string ReminderTimeProperty = "ReminderTime";
        public const string UserIdProperty = "UserId";
        public const string DocumentTypeIdProperty = "DocumentTypeId";
        public const string DocumentIdProperty = "DocumentId";
        private System.DateTime _StartDateField;
        private System.DateTime _DueDateField;
        private System.DateTime _ReminderTimeField;
        private int _UserIdField;
        private System.Nullable<int> _DocumentTypeIdField;
        private System.Nullable<int> _DocumentIdField;
        public override string DataItemClass
        {
            get
            {
                return DataItemClassName;
            }
        }
        [XmlAttribute()]
        public ReminderState State
        {
            get
            {
                return (ReminderState)((IDataItem)this).State;
            }
            set
            {
                ((IDataItem)this).State = (byte)value;
            }
        }
        [Column(Name="StartDate", IsNullable=false)]
        [XmlAttribute()]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDateField;
            }
            set
            {
                this._StartDateField = value;
                InvokePropertyChanged("StartDate");
            }
        }
        [Column(Name="DueDate", IsNullable=false)]
        [XmlAttribute()]
        public System.DateTime DueDate
        {
            get
            {
                return this._DueDateField;
            }
            set
            {
                this._DueDateField = value;
                InvokePropertyChanged("DueDate");
            }
        }
        [Column(Name="ReminderTime", IsNullable=false)]
        [XmlAttribute()]
        public System.DateTime ReminderTime
        {
            get
            {
                return this._ReminderTimeField;
            }
            set
            {
                this._ReminderTimeField = value;
                InvokePropertyChanged("ReminderTime");
            }
        }
        [Column(Name="UserId", IsNullable=false)]
        [XmlAttribute()]
        public int UserId
        {
            get
            {
                return this._UserIdField;
            }
            set
            {
                this._UserIdField = value;
                InvokePropertyChanged("UserId");
            }
        }
        [Column(Name="DocumentTypeId", IsNullable=true)]
        [XmlAttribute()]
        public System.Nullable<int> DocumentTypeId
        {
            get
            {
                return this._DocumentTypeIdField;
            }
            set
            {
                this._DocumentTypeIdField = value;
                InvokePropertyChanged("DocumentTypeId");
            }
        }
        [Column(Name="DocumentId", IsNullable=true)]
        [XmlAttribute()]
        public System.Nullable<int> DocumentId
        {
            get
            {
                return this._DocumentIdField;
            }
            set
            {
                this._DocumentIdField = value;
                InvokePropertyChanged("DocumentId");
            }
        }
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            NotifyPropertyChangedInternal(e.PropertyName);
            base.OnPropertyChanged(e);
        }

		partial void NotifyPropertyChangedInternal(string propertyName);
    }
}
