//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DykBits.Crm.Data
{
    using System;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    public enum AbstractProductState : byte
    {
        [XmlEnum("0")]
        NotExist = 0,
        [XmlEnum("1")]
        Active = 1,
        [XmlEnum("2")]
        Inactive = 2,
    }
    public partial class AbstractProduct : DataItem
    {
        public const string DataItemClassName = "AbstractProduct";
        public const string FullNameProperty = "FullName";
        public const string ProductTypeIdProperty = "ProductTypeId";
        public const string ProductCategoryIdProperty = "ProductCategoryId";
        public const string ProductSubcategoryIdProperty = "ProductSubcategoryId";
        public const string UnitOfMeasureIdProperty = "UnitOfMeasureId";
        private string _FullNameField;
        private int _ProductTypeIdField;
        private int _ProductCategoryIdField;
        private System.Nullable<int> _ProductSubcategoryIdField;
        private int _UnitOfMeasureIdField;
        public override string DataItemClass
        {
            get
            {
                return DataItemClassName;
            }
        }
        [XmlAttribute()]
        public AbstractProductState State
        {
            get
            {
                return (AbstractProductState)((IDataItem)this).State;
            }
            set
            {
                ((IDataItem)this).State = (byte)value;
            }
        }
        [Column(Name="FullName", IsNullable=true, MaximumLength=1024)]
        [XmlAttribute()]
        public string FullName
        {
            get
            {
                return this._FullNameField;
            }
            set
            {
                this._FullNameField = value;
                InvokePropertyChanged("FullName");
            }
        }
        [Column(Name="ProductTypeId", IsNullable=false)]
        [XmlAttribute()]
        public int ProductTypeId
        {
            get
            {
                return this._ProductTypeIdField;
            }
            set
            {
                this._ProductTypeIdField = value;
                InvokePropertyChanged("ProductTypeId");
            }
        }
        [Column(Name="ProductCategoryId", IsNullable=false)]
        [XmlAttribute()]
        public int ProductCategoryId
        {
            get
            {
                return this._ProductCategoryIdField;
            }
            set
            {
                this._ProductCategoryIdField = value;
                InvokePropertyChanged("ProductCategoryId");
            }
        }
        [Column(Name="ProductSubcategoryId", IsNullable=true)]
        [XmlAttribute()]
        public System.Nullable<int> ProductSubcategoryId
        {
            get
            {
                return this._ProductSubcategoryIdField;
            }
            set
            {
                this._ProductSubcategoryIdField = value;
                InvokePropertyChanged("ProductSubcategoryId");
            }
        }
        [Column(Name="UnitOfMeasureId", IsNullable=false)]
        [XmlAttribute()]
        public int UnitOfMeasureId
        {
            get
            {
                return this._UnitOfMeasureIdField;
            }
            set
            {
                this._UnitOfMeasureIdField = value;
                InvokePropertyChanged("UnitOfMeasureId");
            }
        }
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            NotifyPropertyChangedInternal(e.PropertyName);
            base.OnPropertyChanged(e);
        }

		partial void NotifyPropertyChangedInternal(string propertyName);
    }
}
