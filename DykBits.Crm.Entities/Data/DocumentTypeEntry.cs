//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DykBits.Crm.Data
{
    using System;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    public enum DocumentTypeEntryState : byte
    {
        [XmlEnum("0")]
        NotExist = 0,
        [XmlEnum("1")]
        Active = 1,
    }
    public partial class DocumentTypeEntry : DataItem
    {
        public const string DataItemClassName = "DocumentTypeEntry";
        public const string ClassNameProperty = "ClassName";
        public const string TableNameProperty = "TableName";
        public const string SchemaNameProperty = "SchemaName";
        public const string ClrTypeNameProperty = "ClrTypeName";
        public const string DataAdapterTypeNameProperty = "DataAdapterTypeName";
        public const string DataAdapterModeProperty = "DataAdapterMode";
        public const string IsNumberedProperty = "IsNumbered";
        public const string SmallImageProperty = "SmallImage";
        public const string LargeImageProperty = "LargeImage";
        public const string SupportsTransitionTemplatesProperty = "SupportsTransitionTemplates";
        private string _ClassNameField;
        private string _TableNameField;
        private string _SchemaNameField;
        private string _ClrTypeNameField;
        private string _DataAdapterTypeNameField;
        private string _DataAdapterModeField;
        private bool _IsNumberedField;
        private byte[] _SmallImageField;
        private byte[] _LargeImageField;
        private bool _SupportsTransitionTemplatesField;
        public override string DataItemClass
        {
            get
            {
                return DataItemClassName;
            }
        }
        [XmlAttribute()]
        public DocumentTypeEntryState State
        {
            get
            {
                return (DocumentTypeEntryState)((IDataItem)this).State;
            }
            set
            {
                ((IDataItem)this).State = (byte)value;
            }
        }
        [Column(Name="ClassName", IsNullable=false, MaximumLength=256)]
        [XmlAttribute()]
        public string ClassName
        {
            get
            {
                return this._ClassNameField;
            }
            set
            {
                this._ClassNameField = value;
                InvokePropertyChanged("ClassName");
            }
        }
        [Column(Name="TableName", IsNullable=false, MaximumLength=128)]
        [XmlAttribute()]
        public string TableName
        {
            get
            {
                return this._TableNameField;
            }
            set
            {
                this._TableNameField = value;
                InvokePropertyChanged("TableName");
            }
        }
        [Column(Name="SchemaName", IsNullable=false, MaximumLength=128)]
        [XmlAttribute()]
        public string SchemaName
        {
            get
            {
                return this._SchemaNameField;
            }
            set
            {
                this._SchemaNameField = value;
                InvokePropertyChanged("SchemaName");
            }
        }
        [Column(Name="ClrTypeName", IsNullable=true, MaximumLength=1024)]
        [XmlAttribute()]
        public string ClrTypeName
        {
            get
            {
                return this._ClrTypeNameField;
            }
            set
            {
                this._ClrTypeNameField = value;
                InvokePropertyChanged("ClrTypeName");
            }
        }
        [Column(Name="DataAdapterTypeName", IsNullable=true, MaximumLength=1024)]
        [XmlAttribute()]
        public string DataAdapterTypeName
        {
            get
            {
                return this._DataAdapterTypeNameField;
            }
            set
            {
                this._DataAdapterTypeNameField = value;
                InvokePropertyChanged("DataAdapterTypeName");
            }
        }
        [Column(Name="DataAdapterMode", IsNullable=true, MaximumLength=32)]
        [XmlAttribute()]
        public string DataAdapterMode
        {
            get
            {
                return this._DataAdapterModeField;
            }
            set
            {
                this._DataAdapterModeField = value;
                InvokePropertyChanged("DataAdapterMode");
            }
        }
        [Column(Name="IsNumbered", IsNullable=false)]
        [XmlAttribute()]
        public bool IsNumbered
        {
            get
            {
                return this._IsNumberedField;
            }
            set
            {
                this._IsNumberedField = value;
                InvokePropertyChanged("IsNumbered");
            }
        }
        [Column(Name="SmallImage", IsNullable=true, MaximumLength=-1)]
        [XmlAttribute()]
        public byte[] SmallImage
        {
            get
            {
                return this._SmallImageField;
            }
            set
            {
                this._SmallImageField = value;
                InvokePropertyChanged("SmallImage");
            }
        }
        [Column(Name="LargeImage", IsNullable=true, MaximumLength=-1)]
        [XmlAttribute()]
        public byte[] LargeImage
        {
            get
            {
                return this._LargeImageField;
            }
            set
            {
                this._LargeImageField = value;
                InvokePropertyChanged("LargeImage");
            }
        }
        [Column(Name="SupportsTransitionTemplates", IsNullable=false)]
        [XmlAttribute()]
        public bool SupportsTransitionTemplates
        {
            get
            {
                return this._SupportsTransitionTemplatesField;
            }
            set
            {
                this._SupportsTransitionTemplatesField = value;
                InvokePropertyChanged("SupportsTransitionTemplates");
            }
        }
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            NotifyPropertyChangedInternal(e.PropertyName);
            base.OnPropertyChanged(e);
        }

		partial void NotifyPropertyChangedInternal(string propertyName);
    }
}
